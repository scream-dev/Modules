import datetime
import logging
import asyncio
from telethon.tl.types import Message
from .. import loader, utils

logger = logging.getLogger(__name__)

class PlanManager(loader.Module):
    strings = {
        "name": "PlanManager",
        "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–Ω–æ–≤ –æ—Ç @ScreamDev",
        "plans_empty": "‚ùå <b>–°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤ –ø—É—Å—Ç.</b>",
        "plans_list": "üìù <b>–°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤:</b>\n{}",
        "plan_added": "‚úÖ <b>–ü–ª–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω:</b> {}",
        "plan_deleted": "üóëÔ∏è <b>–ü–ª–∞–Ω —É–¥–∞–ª—ë–Ω:</b> {}",
        "plan_crossed": "‚úçÔ∏è <b>–ü–ª–∞–Ω –≤—ã—á–µ—Ä–∫–Ω—É—Ç:</b> {}",
        "invalid_plan_number": "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–ª–∞–Ω–∞.</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "timezone",
                "0",
                lambda: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1, -1, -3 –∏ —Ç. –¥. –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–º–µ—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.",
            ),
        )
        self.plans = []  # –°–ø–∏—Å–æ–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
        self.crossed_plans = []  # –°–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã—á–µ—Ä–∫–Ω—É—Ç—ã—Ö –ø–ª–∞–Ω–æ–≤
        asyncio.create_task(self.start_cleanup())

    async def start_cleanup(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞–Ω–æ–≤"""
        while True:
            now = datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=int(self.config["timezone"]))))
            if now.hour == 0 and now.minute == 0:
                self.plans.clear()  # –û—á–∏—Å—Ç–∫–∞ –ø–ª–∞–Ω–æ–≤
                self.crossed_plans.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –≤—ã—á–µ—Ä–∫–Ω—É—Ç—ã—Ö –ø–ª–∞–Ω–æ–≤
                logger.info("–°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤ –æ—á–∏—â–µ–Ω.")
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π 60 —Å–µ–∫—É–Ω–¥

    @loader.command(command="makeplan")
    async def makeplan(self, message: Message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø–ª–∞–Ω"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "‚ö†Ô∏è <b>–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω.</b>")
            return
        
        self.plans.append(args)
        await utils.answer(message, self.strings["plan_added"].format(args))

    @loader.command(command="plan")
    async def show_plans(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤"""
        if not self.plans and not self.crossed_plans:
            await utils.answer(message, self.strings["plans_empty"])
            return
        
        formatted_plans = "\n".join(
            f"{i + 1}. {plan}" for i, plan in enumerate(self.plans)
        )
        formatted_crossed = "\n".join(
            f"{i + 1 + len(self.plans)}. <s>{plan}</s>" for i, plan in enumerate(self.crossed_plans)
        )
        full_plan_list = formatted_plans + "\n" + formatted_crossed if formatted_crossed else formatted_plans
        await utils.answer(message, self.strings["plans_list"].format(full_plan_list))

    @loader.command(command="cross_plan")
    async def cross_plan(self, message: Message):
        """–í—ã—á–µ—Ä–∫–∏–≤–∞–µ—Ç –ø–ª–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞"""
        args = utils.get_args_raw(message)
        if not args.isdigit() or int(args) < 1 or int(args) > len(self.plans):
            await utils.answer(message, self.strings["invalid_plan_number"])
            return
        
        index = int(args) - 1
        crossed_plan = self.plans.pop(index)  # –£–±–∏—Ä–∞–µ–º –ø–ª–∞–Ω –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        self.crossed_plans.append(crossed_plan)  # –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã—á–µ—Ä–∫–Ω—É—Ç—ã—Ö
        await utils.answer(message, self.strings["plan_crossed"].format(crossed_plan))

    @loader.command(command="delplan")
    async def del_plan(self, message: Message):
        """–£–¥–∞–ª—è–µ—Ç –ø–ª–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞"""
        args = utils.get_args_raw(message)
        if not args.isdigit() or int(args) < 1 or int(args) > len(self.plans):
            await utils.answer(message, self.strings["invalid_plan_number"])
            return

        index = int(args) - 1
        deleted_plan = self.plans.pop(index)
        await utils.answer(message, self.strings["plan_deleted"].format(deleted_plan))
